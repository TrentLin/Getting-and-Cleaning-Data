m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVecotr
a
a <- makeVector
a
a
class(a)
class(a$set)
a$get()
a <- makeVector
a
class(a)
class(a$set)
class(a$set)
a$get()                                      #get the vector
cachemean(a)
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector
a
class(a)
class(a$set)
a$get()                                      #get the vector
cachemean(a)                        #calculate the mean  cachemean(a)                        #when is called back use the cached mean
a <- makeVector()                 #initialize
a                                            # shows that a is now a list of functions
class(a)                                 # shows that a is a list
class(a$set)                        # shows that the elements of the list are functions
a$set(c(1,2,3,4,5,6,7))          #set the vector
a$get()                                      #get the vector
cachemean(a)
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()
a
class(a)
class(a$set)
a$set(c(1,2,3,4,5,6,7))
a$get()
cachemean(a)
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()                 #initialize
a                                            # shows that a is now a list of functions
class(a)                                 # shows that a is a list
class(a$set)                        # shows that the elements of the list are functions
a$set(c(1,2,3,4,5,6,7))          #set the vector
a$get()                                      #get the vector
cachemean(a)                        #calculate the mean
cachemean(a)                        #when is called back use the cached mean
makeCacheMatrix <- function(x = matrix())
?matrix
x <- matrix(1:4,2,2)
x
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cachSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
cacheSolve(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
data <- x$get()
data
amatrix$get()
cacheSolve(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inver) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
bmatrix <- makeCacheMatrix()
bmatrix$get()
Class(amatrix)
class(amatrix)
class(amatrix$set)
?solve
CacheSolve(amatrix)
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
cacheSolve(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inver) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inver) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(data) m <<- data
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
attributes(x)
attributes(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function()x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
#best function
best <- function(state, outcome){
#讀取outcome-of-care-measures.csv
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name for min row
if(outcome == "heart attack" ){
irow <- which.min(subdata[,11])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "heart failure"){
irow <- which.min(subdata[,17])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "pneumonia"){
irow <- which.min(subdata[,23])
print(subdata[irow,]$Hospital.Name)
}
}
source("best.R")
best("TX", "heart attack")
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
#Q3
#load GDP Data set
GDP <- read.csv("getdata-data-GDP.csv")
#load EDSTATS Data set
EDSTATS <- read.csv("getdata-data-EDSTATS_Country.csv")
#Merge GDP & EDSTATS by CountryCode and descending order by GDP rank
MergeData <- join(GDP,EDSTATS,by ="CountryCode")
#MergeData2 <- merge(GDP,EDSTATS,by.x="CountryCode",by.y="CountryCode",all=TRUE)
#Descending order by GDP rank
Arrange <- arrange(MergeData,desc(Ranking))
names(MergeData)
#Q4 What is the average GDP ranking for the "High income: OECD" and
#"High income: nonOECD" group?
# Conver Ranking from factor to number
MergeData$Ranking <- as.numeric(MergeData$Ranking)
class(MergeData$Ranking)
aggregate(formula = Ranking ~ Income.Group, data = MergeData, FUN = mean)
setwd("D:/JOHNS HOPKINS Data Science Program/Getting and Cleaning Data/Quize")
#Q3
#load GDP Data set
GDP <- read.csv("getdata-data-GDP.csv")
#load EDSTATS Data set
EDSTATS <- read.csv("getdata-data-EDSTATS_Country.csv")
#Merge GDP & EDSTATS by CountryCode and descending order by GDP rank
MergeData <- join(GDP,EDSTATS,by ="CountryCode")
#MergeData2 <- merge(GDP,EDSTATS,by.x="CountryCode",by.y="CountryCode",all=TRUE)
#Descending order by GDP rank
Arrange <- arrange(MergeData,desc(Ranking))
names(MergeData)
#Q4 What is the average GDP ranking for the "High income: OECD" and
#"High income: nonOECD" group?
# Conver Ranking from factor to number
MergeData$Ranking <- as.numeric(MergeData$Ranking)
class(MergeData$Ranking)
aggregate(formula = Ranking ~ Income.Group, data = MergeData, FUN = mean)
library("sqldf", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("plyr", lib.loc="C:/Program Files/R/R-3.0.2/library")
#Q3
#load GDP Data set
GDP <- read.csv("getdata-data-GDP.csv")
#load EDSTATS Data set
EDSTATS <- read.csv("getdata-data-EDSTATS_Country.csv")
#Merge GDP & EDSTATS by CountryCode and descending order by GDP rank
MergeData <- join(GDP,EDSTATS,by ="CountryCode")
#MergeData2 <- merge(GDP,EDSTATS,by.x="CountryCode",by.y="CountryCode",all=TRUE)
#Descending order by GDP rank
Arrange <- arrange(MergeData,desc(Ranking))
names(MergeData)
#Q4 What is the average GDP ranking for the "High income: OECD" and
#"High income: nonOECD" group?
# Conver Ranking from factor to number
MergeData$Ranking <- as.numeric(MergeData$Ranking)
class(MergeData$Ranking)
aggregate(formula = Ranking ~ Income.Group, data = MergeData, FUN = mean)
?aggregate
aggregate(Ranking ~ Income.Group, data = MergeData,mean)
aggregate(Income.Group ~ Ranking, data = MergeData,mean)
aggregate(Ranking ~ Income.Group, data = MergeData, FUN="mean")
x <- na.omit(MergeData)
View(x)
c <- sqldf("select Ranking,Income.Group from MergeData")
c <- sqldf("select Ranking,Income Group from MergeData")
c <- sqldf("select 'Ranking','Income.Group' from MergeData")
View(c)
c <- sqldf("select Ranking,Income.Group from MergeData")
View(MergeData)
c <- sqldf("select Ranking from MergeData")
View(c)
c <- sqldf("select Income.Group from MergeData")
c <- sqldf("select Income Group from MergeData")
View(MergeData)
c <- sqldf("select Income.Group from MergeData")
View(EDSTATS)
c <- sqldf("select Income.Group from EDSTATS")
library("Hmisc", lib.loc="C:/Program Files/R/R-3.0.2/library")
cut <- cut2(MergeData$Ranking,g=5))
cut <- cut2(MergeData$Ranking,g=5)
table(cut)
table(cut,Income.Group)
table(cut,MergeData$Income.Group)
table(MergeData$Income.Group,cut)
x <- na.omit(MergeData$Ranking)
cut <- cut2(na.omit(MergeData$Ranking),g=5)
cut
x
View(MergeData)
View(GDP)
